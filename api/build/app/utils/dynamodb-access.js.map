{"version":3,"sources":["app/utils/dynamodb-access.ts"],"names":[],"mappings":";AAAA,MAAY,GAAG,WAAM,SAAS,CAAC,CAAA;AAE/B,yBAAmB,WAAW,CAAC,CAAA;AAM/B,MAAM,SAAS,GAAoB;IACjC,MAAM,EAAE,WAAW;CACpB,CAAC;AAEF,EAAE,CAAC,CAAC,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7B,SAAS,CAAC,QAAQ,GAAG,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAChD,CAAC;AAED,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAE7B,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;AAEpD;;;;GAIG;AACH,aAAoB,MAA6B;IAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QACjC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI;YAC9B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAVe,WAAG,MAUlB,CAAA;AAED;;;;GAIG;AACH,aAAoB,MAA6B;IAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QACjC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI;YAC9B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAVe,WAAG,MAUlB,CAAA;AAED;;;;GAIG;AACH,gBAAuB,MAAgC;IACrD,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;QACjC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI;YACjC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAVe,cAAM,SAUrB,CAAA","file":"dynamodb-access.js","sourcesContent":["import * as AWS from \"aws-sdk\";\n\nimport config from \"../config\";\n\ninterface AwsClientConfig extends AWS.ClientConfigPartial {\n  endpoint?: string;\n}\n\nconst awsConfig: AwsClientConfig = {\n  region: \"eu-west-1\",\n};\n\nif (config.dynamoDB.endpoint) {\n  awsConfig.endpoint = config.dynamoDB.endpoint;\n}\n\nAWS.config.update(awsConfig);\n\nconst docClient = new AWS.DynamoDB.DocumentClient();\n\n/**\n * Puts item into DynamoDB\n * @param  {AWS.DynamoDB.PutParam} params Parameters for put operation\n * @return {Promise<any>}                 Promise that resolves to the data returned by the put operation\n */\nexport function put(params: AWS.DynamoDB.PutParam): Promise<any> {\n  return new Promise((resolve, reject) => {\n    docClient.put(params, (err, data) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(data);\n    });\n  });\n}\n\n/**\n * Gets item from DynamoDB\n * @param  {AWS.DynamoDB.GetParam} params Parameters for get operation\n * @return {Promise<any>}                 Promise that resolves to the data returned by the get operation\n */\nexport function get(params: AWS.DynamoDB.GetParam): Promise<any> {\n  return new Promise((resolve, reject) => {\n    docClient.get(params, (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(data.Item);\n    });\n  });\n}\n\n/**\n * Updates item in DynamoDB\n * @param  {AWS.DynamoDB.GetParam} params Parameters for update operation\n * @return {Promise<any>}                 Promise that resolves to the data returned by the update operation\n */\nexport function update(params: AWS.DynamoDB.UpdateParam): Promise<any> {\n  return new Promise((resolve, reject) => {\n    docClient.update(params, (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(data.Item);\n    });\n  });\n}\n"]}