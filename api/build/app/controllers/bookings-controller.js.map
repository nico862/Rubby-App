{"version":3,"sources":["app/controllers/bookings-controller.ts"],"names":[],"mappings":"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","file":"app/controllers/bookings-controller.js","sourcesContent":["import * as express from \"express\";\nimport * as moment from \"moment\";\n\nimport {\n  bookingService,\n  salonService,\n  addressService,\n  customerService,\n  bookingTreatmentService,\n  treatmentService,\n  therapistService\n} from \"../services\";\n\nimport {\n  Booking,\n  Customer,\n  Salon,\n  Address,\n  BookingTreatment,\n  Treatment,\n  Therapist\n} from \"../models\";\n\nfunction assignAddresses(bookings: Booking[]): Promise<Booking[]> {\n  const urns = bookings.map(booking => booking.addressUrn).filter(urn => urn !== undefined);\n\n  return addressService.fetchCustomerAddressesByUrns(urns).then((addresses: Address[]) => {\n    bookings.forEach(booking => booking.address = addresses.find((address: Address) => booking.addressUrn === address.urn));\n  }).then(() => bookings);\n}\n\nfunction assignCustomers(bookings: Booking[]): Promise<Booking[]> {\n  const urns = bookings.map(booking => booking.customerUrn);\n\n  return customerService.fetchCustomersByUrns(urns).then((customers: Customer[]) => {\n    bookings.forEach(booking => booking.customer = customers.find((customer: Customer) => booking.customerUrn === customer.urn));\n  }).then(() => bookings);\n}\n\nfunction assignSalons(bookings: Booking[]): Promise<Booking[]> {\n  const urns = bookings.map(booking => booking.salonUrn);\n\n  return salonService.fetchSalonsByUrns(urns).then((salons: Salon[]) => {\n    bookings.forEach(booking => booking.salon = salons.find((salon: Salon) => booking.salonUrn === salon.urn));\n  }).then(() => bookings);\n}\n\nfunction assignTreatmentToBookingTreatments(salonUrn: string, bookingTreatments: BookingTreatment[]): Promise<BookingTreatment[]> {\n  const urns = bookingTreatments.map(bookingTreatment => bookingTreatment.treatmentUrn);\n\n  return treatmentService.fetchTreatmentsByUrns(salonUrn, urns)\n    .then((treatments: Treatment[]) => {\n      bookingTreatments.forEach(bookingTreatment => bookingTreatment.treatment = treatments.find((treatment: Treatment) => treatment.urn === bookingTreatment.treatmentUrn ));\n    })\n    .then(() => bookingTreatments);\n}\n\nfunction assignTherapistToBookingTreatments(salonUrn: string, bookingTreatments: BookingTreatment[]): Promise<BookingTreatment[]> {\n  const urns = bookingTreatments.map(bookingTreatment => bookingTreatment.therapistUrn);\n  return therapistService.fetchTherapistsByUrns(salonUrn, urns)\n    .then((therapists: Therapist[]) => {\n      bookingTreatments.forEach(bookingTreatment => bookingTreatment.therapist = therapists.find((therapist: Therapist) => therapist.urn === bookingTreatment.therapistUrn ));\n    })\n    .then(() => bookingTreatments);\n}\n\nfunction assignBookingTreatments(bookings: Booking[]): Promise<Booking[]>  {\n  const promises = bookings.map((booking) => {\n    return bookingTreatmentService.fetchBookingTreatments(booking)\n      .then((bookingTreatments: BookingTreatment[]) =>  {\n        booking.bookingTreatments = bookingTreatments;\n      })\n      .then(() => assignTreatmentToBookingTreatments(booking.salonUrn, booking.bookingTreatments))\n      .then(() => assignTherapistToBookingTreatments(booking.salonUrn, booking.bookingTreatments));\n  });\n\n  return Promise.all(promises).then(() => bookings);\n}\n\nfunction assignFields(bookings: Booking[]): Promise<Booking[]> {\n  return Promise.all([\n    assignBookingTreatments(bookings),\n    assignSalons(bookings),\n    assignCustomers(bookings),\n    assignAddresses(bookings)\n  ]).then(() => bookings);\n}\n\ninterface DividedBookings {\n  completed: Booking[];\n  upcoming: Booking[];\n}\n\nfunction divideByCompleted(bookings: Booking[]): DividedBookings {\n  const now = moment();\n\n  const dividedBookings: DividedBookings = {\n    completed: [],\n    upcoming: [],\n  };\n\n  bookings.forEach(booking => {\n    if (booking.timeEnds.isBefore(now)) {\n      dividedBookings.completed.push(booking);\n    }\n    else {\n      dividedBookings.upcoming.push(booking);\n    }\n  });\n\n  return dividedBookings;\n}\n\nfunction sortBookings(bookings: Booking[]): Booking[] {\n  return bookings.sort((a, b) => {\n    if (a.timeEnds < b.timeEnds) return 1;\n    if (a.timeEnds > b.timeEnds) return -1;\n    return 0;\n  });\n}\n\nexport function index(req: express.Request, res: express.Response, next: express.NextFunction): void {\n  const user = res.locals.oauth.token.user;\n\n  bookingService.fetchBookingsForUser(user.id)\n    .then(sortBookings)\n    .then(assignFields)\n    .then((bookings) => res.json(divideByCompleted(bookings)))\n    .catch(console.log);\n}\n"],"sourceRoot":"/source/"}