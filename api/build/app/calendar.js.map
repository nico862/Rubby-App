{"version":3,"sources":["app/calendar.ts"],"names":[],"mappings":";AAAA,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,MAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAE1C,MAAM,UAAU,GAAG,EAAE,CAAC;AAEtB,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACtC,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AAElD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;AAa/D,MAAM,KAAK,GAAY,EAAE,CAAC;AAE1B,OAAO,KAAK,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;IACpC,8BAA8B;IAC9B,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAElG,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;YAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;SACD,GAAG,CAAC,IAAI;QACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU;YACxB,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YAChC,MAAM,GAAG,GAAQ,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAC,CAAC;YAErC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,KAAK,CAAC,KAAK,EAAE,CAAC;gBAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC;YAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;YACnE,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,IAAI,CAAC;QACT,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;QAC1B,OAAA,KAAK;KACN,CAAC,CAAC;IAEH,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,CAAC,GAAG;AACT,eAAe;AACf,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAC/B,CAAC","file":"app/calendar.js","sourcesContent":["import * as moment from \"moment\";\nimport * as calendar from \"node-calendar\";\n\nconst AHEAD_DAYS = 14;\n\nconst start = moment().startOf(\"day\");\nconst end = start.clone().add(AHEAD_DAYS, \"days\");\n\nconst month = start.clone().subtract(start.date() - 1, \"days\");\n\ninterface Day {\n  date: number;\n  notInMonth?: boolean;\n  disabled?: boolean;\n}\n\ninterface Month {\n  name: string;\n  weeks: Day[][];\n}\n\nconst dates: Month[] = [];\n\nwhile (month.month() <= end.month()) {\n  // dates.push(month.format());\n  const monthCalendar = new calendar.Calendar().monthdatescalendar(month.year(), month.month() + 1);\n\n  const weeks = monthCalendar.filter(week => {\n    const contains = week.filter(date => {\n      const day = moment(date);\n      return (day.isAfter(start) && day.isBefore(end));\n    });\n\n    return contains.length > 0;\n  })\n  .map(week => {\n    return week.map(dateString => {\n      const date = moment(dateString);\n      const day: Day = {date: date.date()};\n\n      if (date.month() !== month.month()) day.notInMonth = true;\n      if (date.isBefore(start) || date.isAfter(end)) day.disabled = true;\n      return day;\n    });\n  });\n\n  dates.push({\n    name: month.format(\"MMMM\"),\n    weeks\n  });\n\n  month.add(1, \"months\");\n}\n\nconsole.log(\n  // start.date()\n  JSON.stringify(dates, null, 2)\n);\n"],"sourceRoot":"/source/"}