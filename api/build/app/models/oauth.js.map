{"version":3,"sources":["app/models/oauth.ts"],"names":[],"mappings":";AAAA,MAAY,GAAG,WAAM,cAAc,CAAC,CAAA;AAEpC,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,yBAAmB,WAAW,CAAC,CAAA;AAC/B,2BAA0E,aAAa,CAAC,CAAA;AAExF,MAAM,SAAS,GAAG,gBAAM,CAAC,GAAG,CAAC,WAAW,CAAC;AACzC,MAAM,0BAA0B,GAAG,MAAM,CAAC,QAAQ,CAAC,gBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvE,MAAM,2BAA2B,GAAG,MAAM,CAAC,QAAQ,CAAC,gBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAE7F;IAAA;QACE,wBAAmB,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,MAAM,EAAE,CAAC;IA0E1E,CAAC;IAxEC,cAAc,CAAE,WAAmB;QACjC,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,WAAW,GAAG,GAAG,CAAC,CAAC;QAEpE,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE;YAC/C,gBAAgB,EAAE,IAAI,CAAC,0CAA0C;SACpE,CAAC,CAAC;QAEH,MAAM,CAAC;YACL,WAAW,EAAE,WAAW;YACxB,IAAI,EAAE;gBACJ,EAAE,EAAE,OAAO,CAAC,IAAI;aACjB;SACF,CAAC;IACJ,CAAC;;IAED,qBAAqB,CAAC,iBAAsB;QAC1C,MAAM,CAAC,EAAC,mBAAA,iBAAiB,EAAC,CAAC;IAC7B,CAAC;IAED,SAAS,CAAE,WAAgB,EAAE,MAAW,EAAE,IAAS;QACjD,4BAA4B;QAC5B,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC;YAC3B,IAAI,EAAE,IAAI,CAAC,EAAE;SACd,EAAE,SAAS,EAAE;YACZ,SAAS,EAAE,0BAA0B,CAAC,SAAS,EAAE;SAClD,CAAC,CAAC;QAEH,qBAAqB;QACrB,MAAM,CAAC,mCAAwB,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;aAC/H,IAAI,CAAC;YACJ,MAAM,CAAC;gBACL,WAAW,EAAE,WAAW;gBACxB,oBAAoB,EAAE,IAAI,CAAC,mBAAmB;gBAC9C,YAAY,EAAE,WAAW,CAAC,YAAY;gBACtC,QAAA,MAAM;gBACN,MAAA,IAAI;aACL,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC;IAED,aAAa,CAAC,IAAS,EAAE,MAAW,EAAE,KAAU;QAC9C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAE,QAAgB,EAAE,YAAoB;QAC/C,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,QAAQ;YACrC,kBAAkB,GAAG,YAAY,GAAG,GAAG,CAAC,CAAC;QAErD,MAAM,CAAC,6BAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC;aACxD,IAAI,CAAC,MAAM;YACV,MAAM,CAAC;gBACL,MAAM,EAAE,CAAC,oBAAoB,EAAE,UAAU,CAAC;aAC3C,CAAC;QACJ,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG;YACT,MAAM,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC;;IAED,OAAO,CAAE,QAAgB,EAAE,QAAgB;QACzC,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,QAAQ;YACnC,cAAc,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;QAE7C,MAAM,CAAC,sBAAW,CAAC,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,CAAC;aAC9D,IAAI,CAAC,CAAC,IAAI;YACT,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAU;YAChB,MAAM,CAAC;QACT,CAAC,CAAC,CAAC;IACP,CAAC;;AACH,CAAC;AA3ED;4BA2EC,CAAA","file":"oauth.js","sourcesContent":["import * as jwt from \"jsonwebtoken\";\nimport * as express from \"express\";\nimport * as moment from \"moment\";\n\nimport config from \"../config\";\nimport { userService, oAuthClientService, oAuthRefreshTokenService } from \"../services\";\n\nconst secretKey = config.jwt.tokenSecret;\nconst accessTokenExpiresDuration = moment.duration(config.jwt.expires);\nconst refreshTokenExpiresDuration = moment.duration(config.jwt.expires).add(3600, \"seconds\");\n\nexport default class OAuthModel {\n  accessTokenLifetime = moment().add(accessTokenExpiresDuration).toDate();\n\n  getAccessToken (bearerToken: string): any {\n    console.log(\"in getAccessToken (bearerToken: \" + bearerToken + \")\");\n\n    const decoded = jwt.verify(bearerToken, secretKey, {\n        ignoreExpiration: true // handled by OAuth2 server implementation\n    });\n\n    return {\n      accessToken: bearerToken,\n      user: {\n        id: decoded.user\n      },\n    };\n  };\n\n  saveAuthorizationCode(authorizationCode: any): any {\n    return {authorizationCode};\n  }\n\n  saveToken (tokenObject: any, client: any, user: any): any {\n    // Use JWT for access tokens\n    const accessToken = jwt.sign({\n      user: user.id\n    }, secretKey, {\n      expiresIn: accessTokenExpiresDuration.asSeconds(),\n    });\n\n    // save refresh token\n    return oAuthRefreshTokenService.saveToken(tokenObject.refreshToken, client.id, user.id, moment().add(refreshTokenExpiresDuration))\n      .then(() => {\n        return {\n          accessToken: accessToken,\n          accessTokenExpiresAt: this.accessTokenLifetime,\n          refreshToken: tokenObject.refreshToken,\n          client,\n          user\n        };\n      });\n  }\n\n  validateScope(user: any, client: any, scope: any): any {\n    return true;\n  }\n\n  getClient (clientId: string, clientSecret: string): Promise<any> {\n    console.log(\"in getClient (clientId: \" + clientId +\n                \", clientSecret: \" + clientSecret + \")\");\n\n    return oAuthClientService.getClient(clientId, clientSecret)\n      .then(client => {\n        return {\n          grants: [\"authorization_code\", \"password\"]\n        };\n      })\n      .catch((err) => {\n        return;\n      });\n  };\n\n  getUser (username: string, password: string): Promise<any> {\n    console.log(\"in getUser (username: \" + username +\n                \", password: \" + password + \")\");\n\n    return userService.findUserByEmailAndPassword(username, password)\n      .then((user) => {\n        console.log(\"User id: \" + user.id);\n        return user;\n      })\n      .catch((err: Error) => {\n        return;\n      });\n  };\n}\n"]}