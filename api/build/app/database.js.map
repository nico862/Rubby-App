{"version":3,"sources":["app/database.ts"],"names":[],"mappings":";AAAA,MAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,yBAAmB,UAAU,CAAC,CAAA;AAC9B,yBAAqB,UAAU,CAAC,CAAA;AAEhC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAEhB,0BAAkB,GAAQ;IACrC,wBAAwB,EAAE,EAAE;IAC5B,mBAAmB,EAAE,IAAI;CAC1B,CAAC;AAEF,kBAAyB,KAAU;IACjC,MAAM,CAAC,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM;QACxC,eAAM,CAAC,KAAK,CAAC,kBAAkB,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEnD,EAAE,CAAC,OAAO,CAAC,gBAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI;YAClD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,MAAM,CAAC;YACT,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,MAAM;gBACzC,IAAI,EAAE,CAAC;gBACP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,MAAM,CAAC;gBACT,CAAC;gBACD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AApBe,gBAAQ,WAoBvB,CAAA;AAED,kBAAyB,KAAU;IACjC,MAAM,CAAC,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM;QAC1C,eAAM,CAAC,KAAK,CAAC,kBAAkB,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEnD,EAAE,CAAC,OAAO,CAAC,gBAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI;YAClD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,MAAM,CAAC;YACT,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,MAAM;gBACzC,IAAI,EAAE,CAAC;gBAEP,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,MAAM,CAAC;gBACT,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAtBe,gBAAQ,WAsBvB,CAAA","file":"app/database.js","sourcesContent":["import * as pg from \"pg\";\nimport * as squel from \"squel\";\nimport config from \"./config\";\nimport {logger} from \"./logger\";\n\nsquel.useFlavour(\"postgres\");\n\nexport const squelSelectOptions: any = {\n  tableAliasQuoteCharacter: \"\",\n  replaceSingleQuotes: true,\n};\n\nexport function doSelect(query: any): Promise<any[]> {\n  return new Promise<any[]>((resolve, reject) => {\n    logger.debug(`Running query: ${query.toString()}`);\n\n    pg.connect(config.database.ruuby, (err, client, done) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      client.query(query.toString(), (err, result) => {\n        done();\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(result.rows);\n      });\n    });\n  });\n}\n\nexport function doUpsert(query: any): Promise<boolean> {\n  return new Promise<boolean>((resolve, reject) => {\n    logger.debug(`Running query: ${query.toString()}`);\n\n    pg.connect(config.database.ruuby, (err, client, done) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      client.query(query.toString(), (err, result) => {\n        done();\n\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(true);\n      });\n    });\n  });\n}\n"],"sourceRoot":"/source/"}