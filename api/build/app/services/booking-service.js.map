{"version":3,"sources":["app/services/booking-service.ts"],"names":[],"mappings":";AACA,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,MAAY,GAAG,WAAM,KAAK,CAAC,CAAA;AAC3B,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,yBAAmB,WAAW,CAAC,CAAA;AAC/B,sBAAmC,cAAc,CAAC,CAAA;AAClD,yBAAuC,WAAW,CAAC,CAAA;AACnD,MAAY,EAAE,WAAM,aAAa,CAAC,CAAA;AAOlC,8BAA8B,OAAe,EAAE,OAA8B;IAC3E,MAAM,MAAM,GAAG,eAAS,CAAC,OAAO,CAAC,CAAC;IAElC,sBAAsB;IACtB,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC;SAC5C,IAAI,CAAC,gBAAgB,CAAC;SACtB,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IAEpC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;SACtB,IAAI,CAAC,CAAC,IAAS;QACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,KAAK,GAAG,CAAC,eAAe,CAAC,CAAC;IACrD,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,QAAQ;QACb,sCAAsC;QACtC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,gBAAM,CAAC,WAAW,CAAC,QAAQ,WAAW,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,GAAG,EAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAU,KAAK,aAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC;YAE9E,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC;gBAC3F,CAAC;YACH,CAAC;YAED,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC1B,IAAI,CAAC,UAAU,QAAa;gBAC3B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3C,CAAC,CAAC;iBACD,KAAK,CAAC,UAAU,KAAY;gBAC3B,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC;AAED,sBAAsB,IAAS;IAC9B,MAAM,MAAM,GAAkB;QAC3B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;QAChB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACnC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;KAC9B,CAAC;IAEF,MAAM,CAAC,IAAI,gBAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC;AAED;kBAAe;IACb,sBAAA,oBAAoB;CACrB,CAAC","file":"app/services/booking-service.js","sourcesContent":["import * as express from \"express\";\nimport * as axios from \"axios\";\nimport * as squel from \"squel\";\nimport * as url from \"url\";\nimport * as moment from \"moment\";\n\nimport config from \"../config\";\nimport { extractId, convert } from \"../utils/urn\";\nimport { Booking, BookingParams } from \"../models\";\nimport * as db from \"../database\";\n\nexport interface BookingSearchOptions {\n  start: moment.Moment;\n  end: moment.Moment;\n}\n\nfunction fetchBookingsForUser(userUrn: string, options?: BookingSearchOptions): Promise<any> {\n  const userId = extractId(userUrn);\n\n  // get salons for user\n  const query = squel.select(db.squelSelectOptions)\n      .from(\"members_salons\")\n      .where(\"member_id = ?\", userId);\n\n  return db.doSelect(query)\n    .then((rows: any) => {\n      return rows.map((row: any) => row.salon_unique_id);\n    })\n    .then((salonIds) => {\n      // get bookings for all salons fetched\n      return new Promise((resolve, reject) => {\n        const reqUrl = url.parse(`${config.bookingsApi.endpoint}/bookings`);\n        reqUrl.query = {salonUrn: salonIds.map((id: string) => convert(\"salon\", id))};\n\n        if (options) {\n          if (options.start && options.end) {\n            reqUrl.query.overlaps = `${options.start.toISOString()} TO ${options.end.toISOString()}`;\n          }\n        }\n\n        axios.get(url.format(reqUrl))\n          .then(function (response: any) {\n            resolve(response.data.map(mapToBooking));\n          })\n          .catch(function (error: Error) {\n            reject(error);\n          });\n      });\n  });\n}\n\nfunction mapToBooking(data: any): Booking {\n const params: BookingParams = {\n    urn: data[\"@id\"],\n    timeStarts: moment(data.timeStarts),\n    timeEnds: moment(data.timeEnds),\n    salonUrn: data.salonUrn,\n    addressUrn: data.addressUrn,\n    customerUrn: data.customerUrn,\n    notes: data.notes,\n    status: data.status,\n    timeCreated: data.timeCreated,\n    timeUpdated: data.timeUpdated\n  };\n\n  return new Booking(params);\n}\n\nexport default {\n  fetchBookingsForUser\n};\n"],"sourceRoot":"/source/"}