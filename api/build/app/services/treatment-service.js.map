{"version":3,"sources":["app/services/treatment-service.ts"],"names":[],"mappings":";AACA,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAG/B,sBAAmC,cAAc,CAAC,CAAA;AAClD,MAAY,EAAE,WAAM,aAAa,CAAC,CAAA;AAElC,yBAA2C,WAAW,CAAC,CAAA;AAEvD,MAAM,kBAAkB,GAAQ;IAC9B,wBAAwB,EAAE,EAAE;IAC5B,mBAAmB,EAAE,IAAI;CAC1B,CAAC;AAEF,+BAA+B,QAAgB,EAAE,IAAc;IAC7D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,eAAS,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,eAAS,CAAC,QAAQ,CAAC,CAAC;IACpC,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC;SACzC,IAAI,CAAC,SAAS,OAAO,iBAAiB,CAAC;SACvC,KAAK,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAS;QACvC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAS,KAAK,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACP,CAAC;AAED,2BAA2B,OAAe,EAAE,GAAQ;IAClD,MAAM,MAAM,GAAoB;QAC9B,GAAG,EAAE,aAAO,CAAC,WAAW,EAAE,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC;QAClD,IAAI,EAAE,GAAG,CAAC,YAAY;QACtB,KAAK,EAAE,GAAG,CAAC,aAAa;KACzB,CAAC;IAEF,MAAM,CAAC,IAAI,kBAAS,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC;AAED;kBAAe;IACb,uBAAA,qBAAqB;CACtB,CAAC","file":"app/services/treatment-service.js","sourcesContent":["import * as express from \"express\";\nimport * as squel from \"squel\";\n\nimport config from \"../config\";\nimport { extractId, convert } from \"../utils/urn\";\nimport * as db from \"../database\";\nimport { ResourceNotFound } from \"../errors\";\nimport { Treatment, TreatmentParams } from \"../models\";\n\nconst squelSelectOptions: any = {\n  tableAliasQuoteCharacter: \"\",\n  replaceSingleQuotes: true,\n};\n\nfunction fetchTreatmentsByUrns(salonUrn: string, urns: string[]): Promise<Treatment[]> {\n  const ids = urns.map(extractId);\n  const salonId = extractId(salonUrn);\n  const query = squel.select(squelSelectOptions)\n      .from(`salon_${salonId}.salon_services`)\n      .where(\"service_id IN ?\", ids);\n    return db.doSelect(query).then((rows: any) => {\n      return rows.map((data: any) => mapRowToTreatment(salonId, data));\n    });\n}\n\nfunction mapRowToTreatment(salonId: string, row: any): Treatment {\n  const params: TreatmentParams = {\n    urn: convert(\"treatment\", row.service_id, salonId),\n    name: row.service_name,\n    price: row.service_price\n  };\n\n  return new Treatment(params);\n}\n\nexport default {\n  fetchTreatmentsByUrns\n};\n"],"sourceRoot":"/source/"}