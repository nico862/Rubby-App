{"version":3,"sources":["app/services/user-service.ts"],"names":[],"mappings":";AACA,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAI/B,sBAAmC,cAAc,CAAC,CAAA;AAClD,MAAY,EAAE,WAAM,aAAa,CAAC,CAAA;AAClC,yBAAiC,WAAW,CAAC,CAAA;AAC7C,yBAAiC,WAAW,CAAC,CAAA;AAE7C,MAAM,cAAc,GAAG,gBAAgB,CAAC;AAExC,oCAAoC,KAAa,EAAE,QAAgB;IACjE,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC;SAC9C,IAAI,CAAC,SAAS,CAAC;SACf,KAAK,CAAC,wCAAwC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAEpE,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,IAAI,yBAAgB,CAAC,cAAc,CAAC,CAAC;QAC7C,CAAC;QAAA,CAAC;QAEF,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpB,MAAM,CAAC,IAAI,aAAI,CAAC;YACd,GAAG,EAAE,aAAO,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC;YACnC,KAAK,EAAE,GAAG,CAAC,YAAY;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,wBAAwB,GAAW;IACjC,MAAM,EAAE,GAAG,eAAS,CAAC,GAAG,CAAC,CAAC;IAE1B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC;SAC9C,IAAI,CAAC,SAAS,CAAC;SACf,KAAK,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAE9B,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAS;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpB,MAAM,CAAC,IAAI,aAAI,CAAC;YACd,GAAG,EAAE,aAAO,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC;YACnC,KAAK,EAAE,GAAG,CAAC,YAAY;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED;kBAAe;IACb,gBAAA,cAAc;IACd,gBAAA,cAAc;IACd,4BAAA,0BAA0B;CAC3B,CAAC","file":"app/services/user-service.js","sourcesContent":["import * as express from \"express\";\nimport * as squel from \"squel\";\nimport * as pg from \"pg\";\n\nimport config from \"../config\";\nimport { extractId, convert } from \"../utils/urn\";\nimport * as db from \"../database\";\nimport { ResourceNotFound } from \"../errors\";\nimport { User, UserParams } from \"../models\";\n\nconst USER_NOT_FOUND = \"USER_NOT_FOUND\";\n\nfunction findUserByEmailAndPassword(email: string, password: string): Promise<User> {\n  const query = squel.select(db.squelSelectOptions)\n    .from(\"members\")\n    .where(\"member_email = ? AND member_passwd = ?\", email, password);\n\n  return db.doSelect(query).then((rows) => {\n    if (rows.length === 0) {\n      throw new ResourceNotFound(USER_NOT_FOUND);\n    };\n\n    const row = rows[0];\n\n    return new User({\n      urn: convert(\"user\", row.member_id),\n      email: row.member_email,\n    });\n  });\n}\n\nfunction fetchUserByUrn(urn: string): Promise<User> {\n  const id = extractId(urn);\n\n  const query = squel.select(db.squelSelectOptions)\n    .from(\"members\")\n    .where(\"member_id = ?\", id);\n\n  return db.doSelect(query).then((rows: any) => {\n    const row = rows[0];\n\n    return new User({\n      urn: convert(\"user\", row.member_id),\n      email: row.member_email,\n    });\n  });\n}\n\nexport default {\n  USER_NOT_FOUND,\n  fetchUserByUrn,\n  findUserByEmailAndPassword\n};\n"],"sourceRoot":"/source/"}