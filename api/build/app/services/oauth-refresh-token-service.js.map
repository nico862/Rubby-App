{"version":3,"sources":["app/services/oauth-refresh-token-service.ts"],"names":[],"mappings":";AAEA,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAIjC,MAAY,QAAQ,WAAM,0BAA0B,CAAC,CAAA;AACrD,yBAAiC,WAAW,CAAC,CAAA;AAE7C,MAAM,uBAAuB,GAAG,yBAAyB,CAAC;AAE1D,MAAM,KAAK,GAAG,2BAA2B,CAAC;AAC1C,MAAM,eAAe,GAAG,CAAC,CAAC;AAE1B,kBAAkB,KAAa;IAC7B,MAAM,MAAM,GAA0B;QACpC,SAAS,EAAE,KAAK;QAChB,GAAG,EAAE;YACH,EAAE,EAAE,KAAK;SACV;KACF,CAAC;IAEF,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;SACxB,IAAI,CAAC,CAAC,IAAI;QACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,MAAM,IAAI,yBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC;YACL,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;SACvC,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC;AAED,mBAAmB,KAAa,EAAE,SAAiB,EAAE,OAAe,EAAE,OAAsB;IAC1F,MAAM,MAAM,GAA0B;QACpC,SAAS,EAAE,KAAK;QAChB,IAAI,EAAE;YACJ,EAAE,EAAE,KAAK;YACT,WAAA,SAAS;YACT,SAAA,OAAO;YACP,OAAO,EAAE,OAAO,CAAC,WAAW,EAAE;SAC/B;KACF,CAAC;IAEF,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;SACxB,IAAI,CAAC,CAAC,IAAI;QACT,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACP,CAAC;AAED;kBAAe;IACb,UAAA,QAAQ;IACR,WAAA,SAAS;IACT,yBAAA,uBAAuB;CACxB,CAAC","file":"oauth-refresh-token-service.js","sourcesContent":["import * as AWS from \"aws-sdk\";\nimport * as uuid from \"node-uuid\";\nimport * as moment from \"moment\";\nimport * as oauthServer from \"oauth2-server\";\nimport * as bcrypt from \"bcrypt\";\n\nimport * as dynamoDb from \"../utils/dynamodb-access\";\nimport { ResourceNotFound } from \"../errors\";\n\nconst REFRESH_TOKEN_NOT_FOUND = \"REFRESH_TOKEN_NOT_FOUND\";\n\nconst table = \"RuubyPAOauthRefreshTokens\";\nconst tokenExpiryDays = 1;\n\nfunction getToken(token: string): Promise<oauthServer.RefreshToken> {\n  const params: AWS.DynamoDB.GetParam = {\n    TableName: table,\n    Key: {\n      id: token\n    }\n  };\n\n  return dynamoDb.get(params)\n    .then((data) => {\n      if (!data) {\n        throw new ResourceNotFound(REFRESH_TOKEN_NOT_FOUND);\n      }\n\n      return {\n        clientId: data.clientUrn,\n        userId: data.userUrn,\n        expires: moment(data.expires).toDate()\n      };\n    });\n}\n\nfunction saveToken(token: string, clientUrn: string, userUrn: string, expires: moment.Moment): Promise<boolean> {\n  const params: AWS.DynamoDB.PutParam = {\n    TableName: table,\n    Item: {\n      id: token,\n      clientUrn,\n      userUrn,\n      expires: expires.toISOString(),\n    }\n  };\n\n  return dynamoDb.put(params)\n    .then((data) => {\n      return true;\n    });\n}\n\nexport default {\n  getToken,\n  saveToken,\n  REFRESH_TOKEN_NOT_FOUND\n};\n"]}