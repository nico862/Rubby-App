{"version":3,"sources":["app/services/address-service.ts"],"names":[],"mappings":";AACA,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,MAAY,EAAE,WAAM,aAAa,CAAC,CAAA;AAClC,sBAAmC,cAAc,CAAC,CAAA;AAClD,yBAAuC,WAAW,CAAC,CAAA;AAEnD,MAAM,kBAAkB,GAAQ;IAC9B,wBAAwB,EAAE,EAAE;IAC5B,mBAAmB,EAAE,IAAI;CAC1B,CAAC;AAEF,sCAAsC,IAAc;IAClD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,eAAS,CAAC,CAAC;IAEhC,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC;SACzC,IAAI,CAAC,qBAAqB,CAAC;SAC3B,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;IAE3C,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAS;QACvC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACT,CAAC;AAED,yBAAyB,GAAQ;IAC/B,MAAM,MAAM,GAAkB;QAC5B,GAAG,EAAE,aAAO,CAAC,SAAS,EAAE,GAAG,CAAC,sBAAsB,CAAC;QACnD,QAAQ,EAAE,GAAG,CAAC,QAAQ;QACtB,QAAQ,EAAE,GAAG,CAAC,QAAQ;QACtB,QAAQ,EAAE,GAAG,CAAC,QAAQ;KACvB,CAAC;IAEF,MAAM,CAAC,IAAI,gBAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC;AAED;kBAAe;IACb,8BAAA,4BAA4B;CAC7B,CAAC","file":"address-service.js","sourcesContent":["import * as express from \"express\";\nimport * as squel from \"squel\";\n\nimport * as db from \"../database\";\nimport { extractId, convert } from \"../utils/urn\";\nimport { Address, AddressParams } from \"../models\";\n\nconst squelSelectOptions: any = {\n  tableAliasQuoteCharacter: \"\",\n  replaceSingleQuotes: true,\n};\n\nfunction fetchCustomerAddressesByUrns(urns: string[]): Promise<any> {\n  const ids = urns.map(extractId);\n\n  const query = squel.select(squelSelectOptions)\n      .from(\"customers_addresses\")\n      .where(\"customers_addresses_id IN ?\", ids);\n\n      return db.doSelect(query).then((rows: any) => {\n        return rows.map(mapRowToAddress);\n      });\n}\n\nfunction mapRowToAddress(row: any): Address {\n  const params: AddressParams = {\n    urn: convert(\"address\", row.customers_addresses_id),\n    address1: row.address1,\n    address2: row.address2,\n    postcode: row.postcode\n  };\n\n  return new Address(params);\n}\n\nexport default {\n  fetchCustomerAddressesByUrns\n};\n"]}