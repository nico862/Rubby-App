{"version":3,"sources":["app/services/oauth-client-service.ts"],"names":[],"mappings":";AAIA,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAEjC,MAAY,QAAQ,WAAM,0BAA0B,CAAC,CAAA;AACrD,yBAAiC,WAAW,CAAC,CAAA;AAE7C,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAE5C,MAAM,KAAK,GAAG,qBAAqB,CAAC;AACpC,MAAM,eAAe,GAAG,CAAC,CAAC;AAE1B,mBAAmB,SAAiB,EAAE,YAAoB;IACxD,MAAM,MAAM,GAA0B;QACpC,SAAS,EAAE,KAAK;QAChB,GAAG,EAAE;YACH,EAAE,EAAE,SAAS;SACd;KACF,CAAC;IAEF,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;SACxB,IAAI,CAAC,CAAC,IAAI;QACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,MAAM,IAAI,yBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;gBACjD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,OAAO,CAAC;wBACN,QAAQ,EAAE,IAAI,CAAC,EAAE;qBAClB,CAAC,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,yBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAED;kBAAe;IACb,WAAA,SAAS;IACT,kBAAA,gBAAgB;CACjB,CAAC","file":"oauth-client-service.js","sourcesContent":["import * as AWS from \"aws-sdk\";\nimport * as uuid from \"node-uuid\";\nimport * as moment from \"moment\";\nimport * as oauthServer from \"oauth2-server\";\nimport * as bcrypt from \"bcrypt\";\n\nimport * as dynamoDb from \"../utils/dynamodb-access\";\nimport { ResourceNotFound } from \"../errors\";\n\nconst CLIENT_NOT_FOUND = \"CLIENT_NOT_FOUND\";\n\nconst table = \"RuubyPAOauthClients\";\nconst tokenExpiryDays = 1;\n\nfunction getClient(clientUrn: string, clientSecret: string): Promise<oauthServer.Client> {\n  const params: AWS.DynamoDB.GetParam = {\n    TableName: table,\n    Key: {\n      id: clientUrn\n    }\n  };\n\n  return dynamoDb.get(params)\n    .then((data) => {\n      if (!data) {\n        throw new ResourceNotFound(CLIENT_NOT_FOUND);\n      }\n\n      return new Promise((resolve, reject) => {\n        bcrypt.compare(clientSecret, data.secret, (err, res) => {\n          if (res) {\n            resolve({\n              clientId: data.id,\n            });\n          }\n          else {\n            reject(new ResourceNotFound(CLIENT_NOT_FOUND));\n          }\n        });\n      });\n    });\n}\n\nexport default {\n  getClient,\n  CLIENT_NOT_FOUND\n};\n"]}