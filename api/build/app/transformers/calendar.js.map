{"version":3,"sources":["app/transformers/calendar.ts"],"names":[],"mappings":";AAAA,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,MAAY,QAAQ,WAAM,eAAe,CAAC,CAAA;AAqB1C,kBAAyB,KAAoB,EAAE,GAAkB,EAAE,QAAmB;IACpF,gCAAgC;IAChC,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,QAAQ,CAAC,OAAO,CAAC,OAAO,MAAM,WAAW,CAAE,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhG,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;IAE/D,MAAM,KAAK,GAAY,EAAE,CAAC;IAE1B,OAAO,KAAK,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;QACpC,MAAM,aAAa,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QAElG,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI;YACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;gBAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;gBACzB,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC;aACD,GAAG,CAAC,IAAI;YACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU;gBACxB,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;gBAChC,MAAM,GAAG,GAAQ;oBACf,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE;oBAChB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;iBAChC,CAAC;gBAEF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,KAAK,CAAC,KAAK,EAAE,CAAC;oBAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC;gBAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC;gBACrE,EAAE,CAAC,CAAC,WAAW,CAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAE,CAAC;oBAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC;gBACrE,MAAM,CAAC,GAAG,CAAC;YACb,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC;YACT,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;YAC1B,OAAA,KAAK;SACN,CAAC,CAAC;QAEH,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AA5Ce,gBAAQ,WA4CvB,CAAA;AAED,4BAAmC,GAAkB,EAAE,QAAmB;AAC1E,CAAC;AADe,0BAAkB,qBACjC,CAAA","file":"calendar.js","sourcesContent":["import * as moment from \"moment\";\nimport * as calendar from \"node-calendar\";\n\nimport { Booking } from \"../models\";\n\nexport interface Day {\n  day: number;\n  date: string;\n  notInMonth?: boolean;\n  isDisabled?: boolean;\n  hasBookings?: boolean;\n}\n\nexport interface Month {\n  name: string;\n  weeks: Day[][];\n}\n\ninterface BookingMap {\n  [key: string]: boolean;\n}\n\nexport function getDates(start: moment.Moment, end: moment.Moment, bookings: Booking[]): Month[] {\n  // create a date map of bookings\n  const bookingsMap = {};\n  bookings.forEach(booking => { bookingsMap[ booking.timeStarts.format(\"YYYY-MM-DD\") ] = true; });\n\n  const month = start.clone().subtract(start.date() - 1, \"days\");\n\n  const dates: Month[] = [];\n\n  while (month.month() <= end.month()) {\n    const monthCalendar = new calendar.Calendar().monthdatescalendar(month.year(), month.month() + 1);\n\n    const weeks = monthCalendar.filter(week => {\n      const contains = week.filter(date => {\n        const day = moment(date);\n        return (day.isAfter(start) && day.isBefore(end));\n      });\n\n      return contains.length > 0;\n    })\n    .map(week => {\n      return week.map(dateString => {\n        const date = moment(dateString);\n        const day: Day = {\n          day: date.date(),\n          date: date.format(\"YYYY-MM-DD\"),\n        };\n\n        if (date.month() !== month.month()) day.notInMonth = true;\n        if (date.isBefore(start) || date.isAfter(end)) day.isDisabled = true;\n        if (bookingsMap[ date.format(\"YYYY-MM-DD\") ]) day.hasBookings = true;\n        return day;\n      });\n    });\n\n    dates.push({\n      name: month.format(\"MMMM\"),\n      weeks\n    });\n\n    month.add(1, \"months\");\n  }\n\n  return dates;\n}\n\nexport function getDayAvailability(day: moment.Moment, bookings: Booking[]): any {\n}"]}